// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: src/api/v1/character/character.proto

package character

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CharacterSvc_Create_FullMethodName = "/character.CharacterSvc/Create"
	CharacterSvc_List_FullMethodName   = "/character.CharacterSvc/List"
)

// CharacterSvcClient is the client API for CharacterSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterSvcClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type characterSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterSvcClient(cc grpc.ClientConnInterface) CharacterSvcClient {
	return &characterSvcClient{cc}
}

func (c *characterSvcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, CharacterSvc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterSvcClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, CharacterSvc_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterSvcServer is the server API for CharacterSvc service.
// All implementations must embed UnimplementedCharacterSvcServer
// for forward compatibility
type CharacterSvcServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedCharacterSvcServer()
}

// UnimplementedCharacterSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterSvcServer struct {
}

func (UnimplementedCharacterSvcServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCharacterSvcServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCharacterSvcServer) mustEmbedUnimplementedCharacterSvcServer() {}

// UnsafeCharacterSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterSvcServer will
// result in compilation errors.
type UnsafeCharacterSvcServer interface {
	mustEmbedUnimplementedCharacterSvcServer()
}

func RegisterCharacterSvcServer(s grpc.ServiceRegistrar, srv CharacterSvcServer) {
	s.RegisterService(&CharacterSvc_ServiceDesc, srv)
}

func _CharacterSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterSvc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterSvcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterSvc_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterSvcServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterSvc_ServiceDesc is the grpc.ServiceDesc for CharacterSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character.CharacterSvc",
	HandlerType: (*CharacterSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CharacterSvc_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CharacterSvc_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/v1/character/character.proto",
}
