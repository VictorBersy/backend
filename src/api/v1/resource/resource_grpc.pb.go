// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: src/api/v1/resource/resource.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceSvc_List_FullMethodName   = "/resource.ResourceSvc/List"
	ResourceSvc_Get_FullMethodName    = "/resource.ResourceSvc/Get"
	ResourceSvc_Obtain_FullMethodName = "/resource.ResourceSvc/Obtain"
)

// ResourceSvcClient is the client API for ResourceSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceSvcClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Obtain(ctx context.Context, in *ObtainRequest, opts ...grpc.CallOption) (*ObtainResponse, error)
}

type resourceSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceSvcClient(cc grpc.ClientConnInterface) ResourceSvcClient {
	return &resourceSvcClient{cc}
}

func (c *resourceSvcClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReponse, error) {
	out := new(ListReponse)
	err := c.cc.Invoke(ctx, ResourceSvc_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceSvcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ResourceSvc_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceSvcClient) Obtain(ctx context.Context, in *ObtainRequest, opts ...grpc.CallOption) (*ObtainResponse, error) {
	out := new(ObtainResponse)
	err := c.cc.Invoke(ctx, ResourceSvc_Obtain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceSvcServer is the server API for ResourceSvc service.
// All implementations must embed UnimplementedResourceSvcServer
// for forward compatibility
type ResourceSvcServer interface {
	List(context.Context, *ListRequest) (*ListReponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Obtain(context.Context, *ObtainRequest) (*ObtainResponse, error)
	mustEmbedUnimplementedResourceSvcServer()
}

// UnimplementedResourceSvcServer must be embedded to have forward compatible implementations.
type UnimplementedResourceSvcServer struct {
}

func (UnimplementedResourceSvcServer) List(context.Context, *ListRequest) (*ListReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceSvcServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceSvcServer) Obtain(context.Context, *ObtainRequest) (*ObtainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obtain not implemented")
}
func (UnimplementedResourceSvcServer) mustEmbedUnimplementedResourceSvcServer() {}

// UnsafeResourceSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceSvcServer will
// result in compilation errors.
type UnsafeResourceSvcServer interface {
	mustEmbedUnimplementedResourceSvcServer()
}

func RegisterResourceSvcServer(s grpc.ServiceRegistrar, srv ResourceSvcServer) {
	s.RegisterService(&ResourceSvc_ServiceDesc, srv)
}

func _ResourceSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceSvc_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceSvcServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceSvc_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceSvcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceSvc_Obtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceSvcServer).Obtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceSvc_Obtain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceSvcServer).Obtain(ctx, req.(*ObtainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceSvc_ServiceDesc is the grpc.ServiceDesc for ResourceSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.ResourceSvc",
	HandlerType: (*ResourceSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ResourceSvc_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ResourceSvc_Get_Handler,
		},
		{
			MethodName: "Obtain",
			Handler:    _ResourceSvc_Obtain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/v1/resource/resource.proto",
}
