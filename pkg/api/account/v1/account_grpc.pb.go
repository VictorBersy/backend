// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: account/v1/account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountSvc_Create_FullMethodName             = "/account.v1.AccountSvc/Create"
	AccountSvc_Authenticate_FullMethodName       = "/account.v1.AccountSvc/Authenticate"
	AccountSvc_RefreshAccessToken_FullMethodName = "/account.v1.AccountSvc/RefreshAccessToken"
	AccountSvc_DeleteRefreshToken_FullMethodName = "/account.v1.AccountSvc/DeleteRefreshToken"
	AccountSvc_RequestNewPassword_FullMethodName = "/account.v1.AccountSvc/RequestNewPassword"
	AccountSvc_VerifyAccountEmail_FullMethodName = "/account.v1.AccountSvc/VerifyAccountEmail"
	AccountSvc_Update_FullMethodName             = "/account.v1.AccountSvc/Update"
	AccountSvc_Delete_FullMethodName             = "/account.v1.AccountSvc/Delete"
)

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSvcClient interface {
	// Registers a new user account.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Authenticates a user's login request.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Refresh access token for a user account.
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error)
	// Delete refresh token.
	DeleteRefreshToken(ctx context.Context, in *DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*DeleteRefreshTokenResponse, error)
	// Requests a new password for a user account.
	RequestNewPassword(ctx context.Context, in *RequestNewPasswordRequest, opts ...grpc.CallOption) (*RequestNewPasswordResponse, error)
	// Verify account email address.
	VerifyAccountEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Updates user account settings (e.g., privacy settings, notification
	// preferences).
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Removes an account permanently.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type accountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSvcClient(cc grpc.ClientConnInterface) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, AccountSvc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, AccountSvc_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*RefreshAccessTokenResponse, error) {
	out := new(RefreshAccessTokenResponse)
	err := c.cc.Invoke(ctx, AccountSvc_RefreshAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) DeleteRefreshToken(ctx context.Context, in *DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*DeleteRefreshTokenResponse, error) {
	out := new(DeleteRefreshTokenResponse)
	err := c.cc.Invoke(ctx, AccountSvc_DeleteRefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) RequestNewPassword(ctx context.Context, in *RequestNewPasswordRequest, opts ...grpc.CallOption) (*RequestNewPasswordResponse, error) {
	out := new(RequestNewPasswordResponse)
	err := c.cc.Invoke(ctx, AccountSvc_RequestNewPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) VerifyAccountEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, AccountSvc_VerifyAccountEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, AccountSvc_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AccountSvc_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
// All implementations must embed UnimplementedAccountSvcServer
// for forward compatibility
type AccountSvcServer interface {
	// Registers a new user account.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Authenticates a user's login request.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Refresh access token for a user account.
	RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error)
	// Delete refresh token.
	DeleteRefreshToken(context.Context, *DeleteRefreshTokenRequest) (*DeleteRefreshTokenResponse, error)
	// Requests a new password for a user account.
	RequestNewPassword(context.Context, *RequestNewPasswordRequest) (*RequestNewPasswordResponse, error)
	// Verify account email address.
	VerifyAccountEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Updates user account settings (e.g., privacy settings, notification
	// preferences).
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Removes an account permanently.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAccountSvcServer()
}

// UnimplementedAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (UnimplementedAccountSvcServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountSvcServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAccountSvcServer) RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*RefreshAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedAccountSvcServer) DeleteRefreshToken(context.Context, *DeleteRefreshTokenRequest) (*DeleteRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRefreshToken not implemented")
}
func (UnimplementedAccountSvcServer) RequestNewPassword(context.Context, *RequestNewPasswordRequest) (*RequestNewPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNewPassword not implemented")
}
func (UnimplementedAccountSvcServer) VerifyAccountEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccountEmail not implemented")
}
func (UnimplementedAccountSvcServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountSvcServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountSvcServer) mustEmbedUnimplementedAccountSvcServer() {}

// UnsafeAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSvcServer will
// result in compilation errors.
type UnsafeAccountSvcServer interface {
	mustEmbedUnimplementedAccountSvcServer()
}

func RegisterAccountSvcServer(s grpc.ServiceRegistrar, srv AccountSvcServer) {
	s.RegisterService(&AccountSvc_ServiceDesc, srv)
}

func _AccountSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_RefreshAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_DeleteRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).DeleteRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_DeleteRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).DeleteRefreshToken(ctx, req.(*DeleteRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_RequestNewPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNewPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).RequestNewPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_RequestNewPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).RequestNewPassword(ctx, req.(*RequestNewPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_VerifyAccountEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).VerifyAccountEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_VerifyAccountEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).VerifyAccountEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSvc_ServiceDesc is the grpc.ServiceDesc for AccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.v1.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountSvc_Create_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AccountSvc_Authenticate_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _AccountSvc_RefreshAccessToken_Handler,
		},
		{
			MethodName: "DeleteRefreshToken",
			Handler:    _AccountSvc_DeleteRefreshToken_Handler,
		},
		{
			MethodName: "RequestNewPassword",
			Handler:    _AccountSvc_RequestNewPassword_Handler,
		},
		{
			MethodName: "VerifyAccountEmail",
			Handler:    _AccountSvc_VerifyAccountEmail_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountSvc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/account.proto",
}
