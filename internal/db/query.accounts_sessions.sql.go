// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.accounts_sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountSession = `-- name: CreateAccountSession :exec
INSERT INTO accounts_sessions (
        account_id,
        refresh_token,
        user_agent,
        ip_address,
        issued_at,
        expires_at
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, account_id, refresh_token, user_agent, ip_address, issued_at, expires_at, created_at
`

type CreateAccountSessionParams struct {
	AccountID    pgtype.UUID
	RefreshToken string
	UserAgent    pgtype.Text
	IpAddress    pgtype.Text
	IssuedAt     pgtype.Timestamp
	ExpiresAt    pgtype.Timestamp
}

func (q *Queries) CreateAccountSession(ctx context.Context, arg CreateAccountSessionParams) error {
	_, err := q.db.Exec(ctx, createAccountSession,
		arg.AccountID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.IssuedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteAccountSession = `-- name: DeleteAccountSession :exec
DELETE FROM accounts_sessions
WHERE refresh_token = $1
`

func (q *Queries) DeleteAccountSession(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, deleteAccountSession, refreshToken)
	return err
}

const getAccountSessionByRefreshToken = `-- name: GetAccountSessionByRefreshToken :one
SELECT id, account_id, refresh_token, user_agent, ip_address, issued_at, expires_at, created_at
FROM accounts_sessions
WHERE refresh_token = $1
LIMIT 1
`

func (q *Queries) GetAccountSessionByRefreshToken(ctx context.Context, refreshToken string) (AccountsSession, error) {
	row := q.db.QueryRow(ctx, getAccountSessionByRefreshToken, refreshToken)
	var i AccountsSession
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
